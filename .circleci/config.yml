version: '2.1'
jobs:
  test:
    working_directory: ~/circleci-frontend
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Install packages
          command: yarn
      - run:
          name: Install JUnit coverage reporter
          command: yarn add --dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          command: yarn ci:test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
  build-upload-main:
    working_directory: ~/circleci-frontend
    docker:
      - image: circleci/node
        environment:
          TGZ_NAME: /tmp/my24-frontend-main-build.tgz
          RELEASE_NAME: /tmp/frontend-release
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt install virtualenv golang-go
      - run:
          name: Install packages
          command: yarn
      - run:
          name: Create build
          command: yarn ci:build
      - run:
           name: set environment var TARGET_DIR
           command: |
             DATE=$(date +"%Y-%m-%d_%H%M")
             echo 'export TARGET_DIR="my24-frontend-${DATE}-${CIRCLE_BUILD_NUM}"' >> $BASH_ENV
             source $BASH_ENV
      - run:
           name: Create build archive
           command: |
             DATE=$(date +"%Y-%m-%d_%H%M")
             TARGET_DIR="my24-frontend-${DATE}-${CIRCLE_BUILD_NUM}"
             mkdir /tmp/$TARGET_DIR
             cp -r dist /tmp/$TARGET_DIR
             echo $(cat src/version.js | sed -r "s/^.*'([^']+)'$/\1/") > /tmp/$TARGET_DIR/VERSION
             cd /tmp
             tar -zcf $TGZ_NAME $TARGET_DIR
             echo "$TARGET_DIR" > $RELEASE_NAME
      - run:
           name: Clone build-upload repo
           command: git clone https://github.com/My24Service/build-upload.git
      - run:
           name: Upload to linode
           command: |
              cd build-upload
              virtualenv --python=python3 venv
              . venv/bin/activate
              pip install -r requirements.txt
              cd build_upload
              python manage.py upload_live_build --file $TGZ_NAME
              python manage.py upload_live_build --file $RELEASE_NAME
      - run:
           name: Create github release
           command: |
              source $BASH_ENV
              go get github.com/tcnksm/ghr
              VERSION=$(cat /tmp/$TARGET_DIR/VERSION)
              mkdir /tmp/release
              cp $TGZ_NAME /tmp/release/frontend-release-${VERSION}
              $HOME/go/bin/ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} /tmp/release
  build-upload-develop:
    working_directory: ~/circleci-frontend
    docker:
      - image: circleci/node
        environment:
          TGZ_NAME: /tmp/my24-frontend-develop-build.tgz
          RELEASE_NAME: /tmp/frontend-release
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt install virtualenv
      - run:
          name: Install packages
          command: yarn
      - run:
          name: Create build
          command: yarn ci:build
      - run:
           name: Create build archive
           command: |
             DATE=$(date +"%Y-%m-%d_%H%M")
             TARGET_DIR="my24-frontend-${DATE}-${CIRCLE_BUILD_NUM}"
             mkdir /tmp/$TARGET_DIR
             cp -r dist /tmp/$TARGET_DIR
             echo $(cat src/version.js | sed -r "s/^.*'([^']+)'$/\1/") > /tmp/$TARGET_DIR/VERSION
             cd /tmp
             tar -zcf $TGZ_NAME $TARGET_DIR
             echo "$TARGET_DIR" > $RELEASE_NAME
      - run:
           name: Clone build-upload repo
           command: git clone https://github.com/My24Service/build-upload.git
      - run:
           name: Upload to linode
           command: |
              cd build-upload
              virtualenv --python=python3 venv
              . venv/bin/activate
              pip install -r requirements.txt
              cd build_upload
              python manage.py upload_dev_build --file $TGZ_NAME
              python manage.py upload_dev_build --file $RELEASE_NAME
workflows:
   version: 2
   build-main:
     jobs:
       - test:
           filters:
             branches:
               only: main
       - build-upload-main:
           requires:
             - test
           filters:
             branches:
               only: main
   build-develop:
     jobs:
       - test:
           filters:
             branches:
               only: develop
       - build-upload-develop:
           requires:
             - test
           filters:
             branches:
               only: develop
